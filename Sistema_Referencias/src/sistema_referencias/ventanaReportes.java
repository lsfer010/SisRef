/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistema_referencias;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lsfer
 */
public class ventanaReportes extends javax.swing.JFrame {

    /**
     * Creates new form ventanaReportes
     */
    public ventanaReportes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTCategoria = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        BCerrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextoRefCir = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lresultado = new javax.swing.JTextPane();
        ComboOpcion = new javax.swing.JComboBox<>();
        ConsultarCHidos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTCategoria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Nombre"
            }
        ));
        jScrollPane1.setViewportView(jTCategoria);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 375, 85));

        jPanel1.setBackground(new java.awt.Color(255, 204, 0));

        BCerrar.setText("Cerrar");
        BCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BCerrarActionPerformed(evt);
            }
        });

        jLabel1.setText("Texto:");

        jLabel6.setBackground(new java.awt.Color(0, 0, 0));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel6.setText("SISLIB.");

        jScrollPane2.setViewportView(lresultado);

        ComboOpcion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Referencias circulares", "Referencias", "Categorias" }));

        ConsultarCHidos.setText("Reportar");
        ConsultarCHidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConsultarCHidosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextoRefCir, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(16, 16, 16))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(BCerrar)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(408, 408, 408)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(ComboOpcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(ConsultarCHidos)
                        .addGap(73, 73, 73)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextoRefCir, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ComboOpcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ConsultarCHidos)
                .addGap(94, 94, 94)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(BCerrar)
                        .addGap(16, 16, 16))))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 350));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_BCerrarActionPerformed

    private void ConsultarCHidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConsultarCHidosActionPerformed
        String texto;
        switch(ComboOpcion.getSelectedItem().toString()){
           
            case "Referencias circulares":texto = jTextoRefCir.getText();
        referenciasCirculares(texto);break;
            case "Referencias":texto = jTextoRefCir.getText();
        consultaReferencias(texto);break;
            case "Categorias":consultaCategorias();break;
        }
    }//GEN-LAST:event_ConsultarCHidosActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    private void consultaCategorias() {

        String id_Categoria = "";
        String sql = "";
        String resultado = ""; //no olvidar mandar un mensaje como conclusion de la consulta
        
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            jTCategoria.setModel(modelo);
             //Hacemos la conexion
            ResultSet rs = null;
            Conexion connection = new Conexion();
            Connection con = connection.getConexion();
            PreparedStatement ps = con.prepareStatement("SELECT T.id_categoria, C.nombre, COUNT(T.id_categoria) FROM categoria AS C, texto AS T WHERE C.id_categoria = T.id_categoria GROUP BY T.id_categoria"); //Group By
            rs = ps.executeQuery();
            
            modelo.addColumn("ID_Categoria");
            modelo.addColumn("Nombre");
            modelo.addColumn("Veces repetida");
            
            //Ahora ingresamos los datos en la tabla que trabaja con objetos
            while(rs.next()) { //No seria un do{param;}while(condition);?
                Object[] filas = new Object[3]; //ya que la tabla trabaja con objetos, metemos todo en objetos Son dos columnas
                
                for (int i = 0; i < 3; i++){
                    filas[i] = rs.getObject(i+1);
                }
                
                //Los agregamos a la tabla
                modelo.addRow(filas);
            }
            
        } catch (SQLException ex) {
            JOptionPane.showInputDialog("Error:" + ex);
        }
        
    }
    
    private void consultaReferencias(String nLibro) {
        //Pediremos el nombre del libro para buscarlo en la tabla texto, primero buscaremos el nombre del libro y obtendremos el valor de su id, para enseguida obtener la lista de los ID que mencionen a ese libro,
        //Definimos variables que utilizaremos en el programa
        //Object[] filas = new Object[2]; // Creamos un objeto que almacene los valores de id y nombre respectivamente para los libros que hacen en su texto alguna referencia al libro en cuestiÃ³n
        int numLibros = 0, numLibrosContados = 0;
        String id_texto = "";
        String sql;
        String resultado = ""; //El texto de la consulta final
        String texto = nLibro; //Asociamos el nombre del libro del que se esta consultando
        String where = "WHERE titulo = '" + texto + "'";
        
        //Falta hacer el try y el catch
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            jTCategoria.setModel(modelo);
            //Hacemos la conexion
            
            ResultSet rs = null;
            Conexion connection = new Conexion();
            Connection con = connection.getConexion();
            PreparedStatement ps = con.prepareStatement("SELECT id_texto FROM texto WHERE titulo = ?");
            ps.setString(1, texto);

            rs = ps.executeQuery(); //rs nos debolvera los datos de la consulta, en este caso nos regresara id_texto
            while (rs.next()){
                id_texto = rs.getObject(1).toString(); //Aqui estamos manejando el id como un texto, por si enseguida llegaramos a tener problemas con los valores que nos proporcione SQL
            }
            
             //Buscaremos donde el texto destino, es decir el texto al que se hace referencia, sea el que estamos buscando
           
            //Ahora cambiamos de tabla a referencia
            //Preparamos para la siguiente consulta a la BD
            //Seleccionamos el campo de el ID que hace referencia al campo en cuestion
            
            PreparedStatement ps2 = con.prepareStatement("SELECT t1.id_texto_actual, t2.titulo FROM referencia AS t1, texto AS t2 "
                    + "WHERE t1.id_texto_destino = ? AND t2.id_texto = ?");
            ps2.setInt(1, Integer.parseInt(id_texto));
            ps2.setInt(2, Integer.parseInt(id_texto));
            //ps = con.prepareStatement(sql);
            rs = ps2.executeQuery();//Aqui tendremos los id de cada libro que hace referencia a el texto en concreto
            
            //AÃ±adimos las columnas correspondientes
            modelo.addColumn("ID_Texto");
            modelo.addColumn("Nombre");
            
            //Ahora ingresamos los datos en la tabla que trabaja con objetos
            while(rs.next()) { //No seria un do{param;}while(condition);?
                Object[] filas = new Object[2]; //ya que la tabla trabaja con objetos, metemos todo en objetos Son dos columnas
               
                for (int i = 0; i < 2; i++){
                    filas[i] = rs.getObject(i+1);
                }
     
                //Los agregamos a la tabla
                modelo.addRow(filas);
            }
            
            
            
            lresultado.setText("La cantidad de libros que hacen referencia a " + nLibro + " son:" + modelo.getRowCount());//Le decimos al programa con la variable nextBook cual es el siquiente libro
            
             con.close();
        } catch(SQLException ex) {
            JOptionPane.showInputDialog("Error:" + ex);
        }
    }

    
    private void referenciasCirculares(String nombrePublicacion) { 
        //ID Texto actual e ID Texto destino estÃ¡n relacionados con ID texto en las tablas
        //Encontrar nombre de texto
        //Esto en caso de ser una accion String texto = tBuscar.getText();
        //Definimos variables que utilizaremos en el programa
        
        int numLibros = 0, numLibrosContados = 0;
        String actualBook = "";//Nos ayudara a controlar que libro tenemos que vereficar
        String nextBook = "";//Es el apuntador al siguiente libro
        String resultado = ""; //El texto de la consulta final
        String texto = nombrePublicacion;

        String where = " WHERE titulo = '" + texto + "'";
        
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            jTCategoria.setModel(modelo);
            
            //Hacemos la conexion
            
            ResultSet rs = null;
            Conexion connection = new Conexion();
            Connection con = connection.getConexion();
            PreparedStatement ps = con.prepareStatement("SELECT id_texto FROM texto WHERE titulo = ?");
            ps.setString(1, texto); //
            
            String sql = "SELECT COUNT(titulo) FROM texto"; //Obtenemos el numero de textos
            ps = con.prepareStatement(sql);
            ResultSet rs2 = ps.executeQuery(); // Debe regresar un numero, inclusive 0
            sql = ""; //Preparamos para la siguiente consulta a la BD
            sql = "SELECT id_texto FROM texto" + where; //Obtenemos el ID de la busqueda
            ps = null; ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            
            while(rs2.next()){
            numLibros = ((Number)rs2.getObject(1)).intValue();//El numero de libros total
            //Otra Opcion Integer.parseInt(noLibros.getObject(1).toString());
            }
            where = ""; //Preparamos la sentencia para obtener el id_texto de la tabla referencia
            String consulta = "";
            while (rs.next()){
            consulta = rs.getObject(1).toString(); //Guardamos el ID del libro en cuestiÃ³n
            }
            actualBook = consulta; //Guardamos el ID del libro en cuestiÃ³n
            where = " WHERE id_texto_actual = " + actualBook + "";
            
            //Ahora buscamos referencias circulares
            for (int i = 0; i < numLibros; i++) {
                sql = ""; //Preparamos para la siguiente consulta a la BD
                sql = "SELECT id_texto_destino FROM referencia" + where; //Seleccionamos el campo de el ID del que se refiere el libro que se tiene en "where"
                ps = null; ps = con.prepareStatement(sql);
                rs = ps.executeQuery();//Aqui tendremos el id del texto destino guardado en la variable rs
                while(rs.next()){
                    nextBook = (rs.getObject(1).toString());//Le decimos al programa con la variable nextBook cual es el siquiente libro
                }
                
                if (nextBook.equals(actualBook)) { //Verificar que se puede comparar de esta forma
                    //Reiniciamos el donde esta el libro inicial para obtener la lista que se mostrara en pantalla
                    modelo.addColumn("ID");//AÃ±adimos las columnas al modelo
                    modelo.addColumn("Titulo");
                    for (int j = 0; j < i; j++) { //Iniciamos el ciclo para imprimir la lista de libros que corresponden a una lista circular
                        sql = ""; //Preparamos para la siguiente consulta a la BD
                        sql = "SELECT T.id_texto, T.titulo FROM texto AS T, referencia AS R  WHERE R.id_texto_actual = " + nextBook; //Esta parte permite seleccionar los campos que se quieran mostrar en la tabla
                        ps = null; ps = con.prepareStatement(sql);
                        rs = ps.executeQuery(); // --------------------------------------------  Que regresa?????
                        
                        //Ahora ingresaremos estos valores que obtuvo rs en la tabla
                        while(rs.next()) {
                            Object[] filas = new Object[2]; //ya que la tabla trabaja con objetos, metemos todo en objetos
                            for (i = 0; i < 2; i++) {
                                filas[i] = rs.getObject(i + 1);
                            }
                            modelo.addRow(filas); //"modelo" Debe ser la tabla con los campos id,texto, titulo
                        }
                        
                        sql = ""; //Preparamos para la siguiente consulta a la BD
                        sql = "SELECT id_texto_destino FROM referencia" + where; //Seleccionamos el campo de el ID del que se refiere el libro que se tiene en "where"
                        ps = null; ps = con.prepareStatement(sql);
                        rs = null; rs = ps.executeQuery(); //Aqui tendremos el id del texto destino guardado en la variable rs
                        while (rs.next()){
                            nextBook = (rs.getObject(1).toString()); //Le decimos al programa con la variable nextBook cual es el siquiente libro
                        }
                        where = " WHERE id_texto_actual = " + nextBook + ""; //Nos pasamos al siguiente libro
                    }
                    i = numLibros; //Ya no recorremos todos los libros, ya que ya encontramos una referencia circular
                    numLibrosContados = i+1;
                }
                where = " WHERE id_texto_actual = " + nextBook + ""; //Nos pasamos al siguiente libro
            }
            lresultado.setText("El numero de libros es " + (numLibrosContados-1) + " en esta referencia circular");
            con.close();
            
        } catch (SQLException ex) {
            JOptionPane.showInputDialog("Error:" + ex);
        }

    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventanaReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventanaReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventanaReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventanaReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventanaReportes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BCerrar;
    private javax.swing.JComboBox<String> ComboOpcion;
    private javax.swing.JButton ConsultarCHidos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTCategoria;
    private javax.swing.JTextField jTextoRefCir;
    private javax.swing.JTextPane lresultado;
    // End of variables declaration//GEN-END:variables
}
